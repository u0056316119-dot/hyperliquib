// proxy.js
class HTTPProxy {
    constructor() {
        this.proxyUrl = 'http://yagey1488:tipidor228@172.245.157.109:6694';
        this.isActive = false;
    }

    async loadPage(url) {
        return new Promise(async (resolve, reject) => {
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL
                if (!url.startsWith('http')) {
                    url = 'http://' + url;
                }

                console.log('üîÑ Connecting to proxy...');
                const proxyUrl = `${this.proxyUrl}/${url}`;
                
                const response = await fetch(proxyUrl);
                
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                
                const html = await response.text();
                console.log('‚úÖ Proxy connection successful');
                
                // –†–µ–Ω–¥–µ—Ä–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
                this.renderPage(html, url);
                this.activate(); // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫
                
                resolve(true);
                
            } catch (error) {
                console.error('‚ùå Proxy connection failed:', error);
                reject(error);
            }
        });
    }

    activate() {
        if (this.isActive) return;
        
        this.isActive = true;
        console.log('üîß Proxy interceptor activated');
        
        // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∫–ª–∏–∫–∏ –ø–æ —Å—Å—ã–ª–∫–∞–º
        document.addEventListener('click', this.handleLinkClick.bind(this));
        
        // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ä–º—ã
        document.addEventListener('submit', this.handleFormSubmit.bind(this));
        
        // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º fetch
        this.interceptFetch();
    }

    handleLinkClick(e) {
        const link = e.target.closest('a[href]');
        if (link && this.isExternalUrl(link.href)) {
            e.preventDefault();
            this.loadPage(link.href);
        }
    }

    handleFormSubmit(e) {
        const form = e.target;
        if (form.action && this.isExternalUrl(form.action)) {
            e.preventDefault();
            this.submitForm(form);
        }
    }

    interceptFetch() {
        const originalFetch = window.fetch;
        window.fetch = (...args) => {
            const url = args[0];
            if (typeof url === 'string' && this.isExternalUrl(url)) {
                args[0] = `${this.proxyUrl}/${url}`;
            }
            return originalFetch.apply(this, args);
        };
    }

    isExternalUrl(url) {
        try {
            const urlObj = new URL(url, window.location.href);
            return !urlObj.href.startsWith(window.location.origin) && 
                   urlObj.protocol.startsWith('http');
        } catch {
            return false;
        }
    }

    async submitForm(form) {
        try {
            const formData = new FormData(form);
            const action = form.action;
            
            const requestOptions = {
                method: form.method,
                headers: {}
            };
            
            if (form.method.toLowerCase() !== 'get') {
                requestOptions.body = new URLSearchParams(formData);
                requestOptions.headers['Content-Type'] = 'application/x-www-form-urlencoded';
            }
            
            const response = await fetch(`${this.proxyUrl}/${action}`, requestOptions);
            const html = await response.text();
            
            this.renderPage(html, action);
            
        } catch (error) {
            console.error('Form submit failed:', error);
            alert(`Form submit failed: ${error.message}`);
        }
    }

    renderPage(html, originalUrl) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–æ–ª–ª –ø–æ–∑–∏—Ü–∏—é
        const scrollY = window.scrollY;
        
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        document.open();
        document.write(html);
        document.close();
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫—Ä–æ–ª–ª
        window.scrollTo(0, scrollY);
        
        // –†–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        setTimeout(() => this.activate(), 100);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º URL –≤ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
        window.history.pushState({}, '', `/?url=${encodeURIComponent(originalUrl)}`);
    }
}
